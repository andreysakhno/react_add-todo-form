{"version":3,"sources":["api/users.ts","api/todos.ts","components/UsersProvider/context/UsersContext.ts","components/UsersProvider/UsersProvider.tsx","components/AddTodoForm/AddTodoForm.tsx","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UsersContext","createContext","useUsers","context","useContext","Error","UsersProvider","users","children","contextValue","getUserById","find","user","Provider","value","initialFormValues","initialFormErrors","isEmptyTitle","isEmptyUserId","AddTodoForm","todos","onTodoAdd","useState","formValues","setFormValues","formErrors","setFormErrors","action","method","onSubmit","event","preventDefault","trimmedTitle","trim","maxId","Math","max","map","todo","className","htmlFor","type","placeholder","onChange","target","disabled","UserInfo","href","TodoInfo","classNames","TodoList","App","todosFromServer","setTodos","usersFromServer","newTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd38f731.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { createContext, useContext } from 'react';\nimport { IUser } from '../../../types';\n\nexport type UsersContextType = {\n  users: IUser[];\n  getUserById: (id: number) => IUser | undefined;\n};\n\nexport const UsersContext = createContext<UsersContextType | null>(null);\n\nexport const useUsers = (): UsersContextType => {\n  const context = useContext(UsersContext);\n\n  if (!context) {\n    throw new Error('useUsers must be used within a UsersProvider');\n  }\n\n  return context;\n};\n","import { IUser } from '../../types';\nimport { UsersContext, UsersContextType } from './context/UsersContext';\n\ntype Props = {\n  users: IUser[]\n};\n\nexport const UsersProvider: React.FC<Props> = ({\n  users,\n  children,\n}) => {\n  const getUserById = (id: number) => (\n    users.find(user => user.id === id)\n  );\n\n  const contextValue: UsersContextType = {\n    users,\n    getUserById,\n  };\n\n  return (\n    <UsersContext.Provider value={contextValue}>\n      { children }\n    </UsersContext.Provider>\n  );\n};\n","import { useState } from 'react';\nimport { ITodo } from '../../types';\nimport { useUsers } from '../UsersProvider/context/UsersContext';\n\ntype Props = {\n  todos: ITodo[];\n  onTodoAdd: (newTodo: ITodo) => void;\n};\n\nconst initialFormValues = {\n  title: '',\n  userId: 0,\n};\n\nconst initialFormErrors = {\n  isEmptyTitle: false,\n  isEmptyUserId: false,\n};\n\nexport const AddTodoForm: React.FC<Props> = ({ todos, onTodoAdd }) => {\n  const [formValues, setFormValues] = useState(initialFormValues);\n  const [formErrors, setFormErrors] = useState(initialFormErrors);\n\n  const { users } = useUsers();\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setFormErrors({\n      ...formErrors,\n      isEmptyTitle: false,\n    });\n\n    setFormValues({\n      ...formValues,\n      [name]: value,\n    });\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    setFormErrors({\n      ...formErrors,\n      isEmptyUserId: false,\n    });\n\n    setFormValues({\n      ...formValues,\n      [name]: +value,\n    });\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const { title, userId } = formValues;\n\n    const trimmedTitle = title.trim();\n\n    if (!trimmedTitle || userId === 0) {\n      setFormErrors({\n        isEmptyTitle: !trimmedTitle,\n        isEmptyUserId: userId === 0,\n      });\n\n      return;\n    }\n\n    const maxId = Math.max(...todos.map(todo => todo.id));\n\n    onTodoAdd({\n      id: maxId + 1,\n      title: trimmedTitle,\n      userId,\n      completed: false,\n    });\n\n    setFormValues(initialFormValues);\n    setFormErrors(initialFormErrors);\n  };\n\n  return (\n    <>\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleId\">Title:</label>\n\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"titleId\"\n            name=\"title\"\n            placeholder=\"Enter a title\"\n            value={formValues.title}\n            onChange={handleTitleChange}\n          />\n\n          {formErrors.isEmptyTitle && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userId\">User:</label>\n\n          <select\n            data-cy=\"userSelect\"\n            id=\"userId\"\n            name=\"userId\"\n            value={formValues.userId}\n            onChange={handleUserChange}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n\n          </select>\n\n          {formErrors.isEmptyUserId && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n    </>\n  );\n};\n","import './UserInfo.scss';\nimport { useUsers } from '../UsersProvider/context/UsersContext';\n\ntype Props = {\n  userId: number;\n};\n\nexport const UserInfo: React.FC<Props> = ({ userId }) => {\n  const { getUserById } = useUsers();\n\n  const user = getUserById(userId);\n\n  return (\n    <>\n      {user && (\n        <a\n          className=\"UserInfo\"\n          href={`mailto:${user.email}`}\n        >\n          {user.name}\n        </a>\n      )}\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { ITodo } from '../../types';\nimport { UserInfo } from '../UserInfo';\nimport './TodoInfo.scss';\n\ntype Props = {\n  todo: ITodo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      <UserInfo userId={userId} />\n    </article>\n  );\n};\n","import { ITodo } from '../../types';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: ITodo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { UsersProvider } from './components/UsersProvider/UsersProvider';\nimport { AddTodoForm } from './components/AddTodoForm/AddTodoForm';\nimport { TodoList } from './components/TodoList';\nimport { ITodo } from './types';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState(todosFromServer);\n\n  const handleTodoAdd = (newTodo: ITodo) => {\n    setTodos([...todos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <UsersProvider users={usersFromServer}>\n        <AddTodoForm\n          todos={todos}\n          onTodoAdd={handleTodoAdd}\n        />\n        <TodoList todos={todos} />\n      </UsersProvider>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}